apiVersion: v1
kind: Namespace
metadata:
  name: event-loader-rinkeby
---
apiVersion: batch/v1
kind: Job
metadata:
  name: init-topics
  namespace: event-loader-rinkeby
spec:
  template:
    spec:
      containers:
      - name: topic-create-all
        image: solsson/kafka:2.0
        command:
        - ./bin/kafka-topics.sh
        - --zookeeper
        -   zookeeper.kafka:2181
        - --create
        - --if-not-exists
        - --topic
        -   ethereum.rinkeby.events.all
        - --partitions
        -   "4"
        - --replication-factor
        -   "4"
      - name: topic-create-transfer
        image: solsson/kafka:2.0
        command:
        - ./bin/kafka-topics.sh
        - --zookeeper
        - zookeeper.kafka:2181
        - --create
        - --if-not-exists
        - --topic
        - ethereum.rinkeby.events.erc20.transfer
        - --partitions
        - "4"
        - --replication-factor
        - "4"
      - name: topic-create-blocks
        image: solsson/kafka:2.0
        command:
        - ./bin/kafka-topics.sh
        - --zookeeper
        - zookeeper.kafka:2181
        - --create
        - --if-not-exists
        - --topic
        - ethereum.rinkeby.blocks
        - --partitions
        - "4"
        - --replication-factor
        - "4"
      restartPolicy: Never
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: event-loader-config
  namespace: event-loader-rinkeby
data:
  NODE_URL: wss://rinkeby.infura.io/ws
  START_BLOCK: '3849997'
  ZOOKEEPER_URL: zookeeper.kafka:2181
  ZOOKEEPER_NAMESPACE: event-loader-rinkeby
  KAFKA_BOOTSTRAP_URL: bootstrap.kafka:9092
  BLOCK_BATCH_SIZE: '10'
  TOPIC_BLOCK: 'ethereum.rinkeby.blocks'
  GROUP_ID: 'ethereum-events-consumer-rinkeby'
  CLIENT_ID: 'ethereum-events-rinkeby'
  TOPIC_ALL: 'ethereum.rinkeby.events.all'
  TOPIC_TRANSFER: 'ethereum.rinkeby.events.erc20.transfer'
  BLOCK_LAG: '0'

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eventloader
  namespace: event-loader-rinkeby
  labels:
    app: eventloader-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: eventloader-service
  template:
    metadata:
      labels:
        app: eventloader-service
    spec:
      containers:
      - name: eventloader-service
        image: vareger/event-loader:1.0.9
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: event-loader-config
        ports:
          - containerPort: 8080
            protocol: TCP
            name: actuator
      imagePullSecrets:
      - name: regcred
